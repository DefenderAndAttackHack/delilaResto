---
openapi: "3.0.1"
info:
  title: "Delilah Resto"
  description: "Borsalino backend API."
  contact:
    email: "federicoborsalino@gmail.com"
  version: "1.0.0"
servers:
- url: "https://virtserver.swaggerhub.com/DefenderAndAttackHack/delilaResto/1.0.0"
  description: "SwaggerHub API Auto Mocking"
- url: "https://localhost:3000/v1"
- url: "http://localhost:3000/v1"
security:
- bearerAuth: []
tags:
- name: "Usuario"
  description: "operaciones de usuario"
- name: "Productos"
  description: "todo sobre productos"
- name: "Pedidos"
  description: "todo sobre ordenes"
paths:
  /users:
    get:
      tags:
      - "Usuario"
      summary: "obtener lista de usuarios(Admin) o detalles de la cuenta de usuario(not\
        \ admin)"
      description: "lista de usuario"
      operationId: "getUserInfo"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
      - "Usuario"
      summary: "editar datos de usuario activos"
      operationId: "editActiveUserData"
      requestBody:
        description: "Fields to change"
        content:
          application/json:
            schema:
              allOf:
              - $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "nombre de usuario o contrase침a not valida"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        "404":
          description: "The specified resource was not found"
        "409":
          description: "el usuario o email ya existen"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
      - "Usuario"
      summary: "crear usuario"
      description: "crear usuario en base de datos"
      operationId: "crear usuario"
      requestBody:
        description: "crear objetos de usuario"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "usuario agregado correctamente a la base de datos"
        "400":
          description: "error al validar los datos de entrada"
        "409":
          description: "usuario existente elegir otro nombre"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: []
    delete:
      tags:
      - "Usuario"
      summary: "Cuenta de usuario deshabilitada (validacion via token)"
      operationId: "deleteActiveUser"
      responses:
        "200":
          description: "User account disabled"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/login:
    get:
      tags:
      - "Usuario"
      summary: "registrar al usuario en el sistema"
      operationId: "loginUser"
      parameters:
      - name: "nombre de usuario o email"
        in: "query"
        description: "nombre de usuario o email para login"
        required: true
        style: "form"
        explode: true
        schema:
          type: "string"
      - name: "password"
        in: "query"
        description: "password para login"
        required: true
        style: "form"
        explode: true
        schema:
          type: "string"
      responses:
        "200":
          description: "operacion exitosa"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: "nombre de usuario o contrase침a not valida"
        "401":
          description: "Invalid request, user account is disabled"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: []
  /users/:username:
    get:
      tags:
      - "Usuario"
      summary: "obtener usuario"
      operationId: "getUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "nombre para buscar"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
      - "Usuario"
      summary: "editar por nombre de usuario (solo admin)"
      description: "Edita un nombre de usuario, obtenido por nombre de usuario (solo\
        \ administrador). Se puede enviar el objeto completo o solo los par치metros\
        \ que se deben modificar."
      operationId: "updateUserAdmin"
      parameters:
      - name: "username"
        in: "path"
        description: "nombre que necesita ser actualizado"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        description: "objeto de usuario actualizado"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User {username} was modified correctly"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
      - "Usuario"
      summary: "eliminar usuario (solo admin)"
      description: "Esto solo puede hacerlo un administrador que haya iniciado sesi칩\
        n."
      operationId: "deleteUserAdmin"
      parameters:
      - name: "username"
        in: "path"
        description: "El nombre que debe eliminarse"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "User {username} was disabled correctly"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products:
    get:
      tags:
      - "Productos"
      summary: "Obtenga una lista de todos los productos disponibles"
      description: "Devuelve una lista de productos activos"
      operationId: "getProducts"
      parameters:
      - name: "search"
        in: "query"
        description: "palabras claves para buscar"
        required: false
        style: "form"
        explode: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
      - "Productos"
      summary: "Agregar producto (solo admin)"
      description: "a침adir productos a base de datos"
      operationId: "addProduct"
      requestBody:
        description: "palabras claves para buscar"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "200":
          description: "producto agregado con exito"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "integer"
                  example: -2
        "400":
          description: "error al validar los datos de entrada"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/:id:
    get:
      tags:
      - "Productos"
      summary: "obtener producto por id"
      description: "Devuelve un detalle de producto espec칤fico, obtenido por su ID"
      operationId: "getProductById"
      parameters:
      - name: "id"
        in: "path"
        description: "id del producto a buscar"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Error al validar los datos de entrada"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
      - "Productos"
      summary: "editar productos por id (solo admin)"
      description: "Edita un producto espec칤fico obteni칠ndolo por su ID"
      operationId: "editProduct"
      parameters:
      - name: "id"
        in: "path"
        description: "id del producto que debe buscarse."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        description: "Modification data"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "200":
          description: "Product with id {productId} modified correctly"
        "400":
          description: "Error al validar los datos de entrada"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
      - "Productos"
      summary: "Inhabilita el producto por ID (solo administrador)"
      description: "Inhabilita un producto espec칤fico, obtenido por su ID"
      operationId: "deleteProduct"
      parameters:
      - name: "id"
        in: "path"
        description: "El ID del producto que debe buscarse."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "Product with id ${productId} was disabled correctly"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders:
    get:
      tags:
      - "Pedidos"
      summary: "obtener lista de pedidos"
      description: "Devuelve una lista de productos. Si el usuario es administrador,\
        \ devuelve una lista de todos los pedidos, si el usuario not es administrador,\
        \ solo devuelve una lista de sus pedidos."
      operationId: "getOrders"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
      - "Pedidos"
      summary: "Agregar producto"
      description: "Agrega un producto a la base de datos"
      operationId: "addOrder"
      requestBody:
        description: "crear pedido"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrder"
        required: true
      responses:
        "200":
          description: "pedido modificado con exito"
        "400":
          description: "Error al validar los datos de entrada"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/:id:
    get:
      tags:
      - "Pedidos"
      summary: "Obtiene el producto por ID (solo administrador)"
      description: "Devuelve un detalle de producto espec칤fico, obtenido por su ID"
      operationId: "getOrderById"
      parameters:
      - name: "id"
        in: "path"
        description: "El ID del pedido que debe buscarse."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
      - "Pedidos"
      summary: "Obtiene el producto por ID (solo administrador)"
      description: "editar producto especifico"
      operationId: "editOrder"
      parameters:
      - name: "id"
        in: "path"
        description: "El ID del pedido que debe buscarse."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "string"
      requestBody:
        description: "crear pedido"
        content:
          application/json:
            schema:
              type: "object"
              properties:
                orderStatus:
                  type: "string"
                  example: "delivered"
        required: true
      responses:
        "200":
          description: "Product with id {productId} modified correctly"
        "400":
          description: "Error al validar los datos de entrada"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Send"
              examples:
                Token Invalidation:
                  summary: "Unauthorized - Invalid Token"
                  value: "Unauthorized - Invalid Token"
                Disabled Account:
                  summary: "Unauthorized - Account is Disabled"
                  value: "Unauthorized - User account is disabled"
                Not Admin:
                  summary: "Unauthorized - Not an admin"
                  value: "Unauthorized - Not an admin"
        "403":
          description: "El estado dado para el producto not es v치lido"
        "404":
          description: "The specified resource was not found"
        default:
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 100
        username:
          type: "string"
          example: "Fede Borsalino"
        password:
          type: "string"
          example: "password1"
        email:
          type: "string"
          example: "fedeBorsa@gmail.com"
        delivery_address:
          type: "string"
          example: "duarte quiros 3100"
        full_name:
          type: "string"
          example: "Federico Borsalino"
        phone:
          type: "integer"
          example: 543519999999
    UserInfo:
      type: "array"
      items:
        type: "object"
        properties:
          user_id:
            type: "integer"
            example: 1
          username:
            type: "string"
            example: "fborsalino"
          full_name:
            type: "string"
            example: "Fernando Borsalino"
          email:
            type: "string"
            example: "fborsalino@gmail.com"
          phone:
            type: "integer"
            example: 543513999999
          delivery_address:
            type: "string"
            example: "colon 5300"
          is_admin:
            type: "boolean"
            example: false
          is_disabled:
            type: "boolean"
            example: false
    Product:
      type: "object"
      properties:
        product_id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "berengenas al forno"
        price:
          type: "number"
          example: 268.5
        img_url:
          type: "string"
          example: "https://via.placeholder.com/150"
        description:
          type: "string"
          example: "lasag침a de berenjena con queso jamon perfumada con oregano y salsa\
            \ blanca"
        is_disabled:
          type: "boolean"
          example: false
    Products:
      type: "array"
      items:
        $ref: "#/components/schemas/Product"
    OrderProduct:
      type: "object"
      properties:
        order_prod_id:
          type: "integer"
          example: 918
        order_id:
          type: "integer"
          example: 9
        product_id:
          type: "integer"
          example: 85
        product_amount:
          type: "integer"
          example: 85
        name:
          type: "string"
          example: "bisteca caprese"
        price:
          type: "number"
          example: 1.5E+3
        img_url:
          type: "string"
          example: "https://via.placeholder.com/300"
        description:
          type: "string"
          example: "burguer con dos medallones de carne hecha de vacio y entra침a con\
            \ extra queso cheddar"
        is_disabled:
          type: "boolean"
          example: false
    OrderProducts:
      type: "array"
      items:
        $ref: "#/components/schemas/OrderProduct"
    Order:
      type: "object"
      properties:
        order_id:
          type: "integer"
          example: 1
        status:
          type: "string"
          example: "nuevo"
        date:
          type: "string"
          format: "date-time"
          example: "2020-10-10T10:11:12Z"
        description:
          type: "string"
          example: "la doble chesse"
        payment_method:
          type: "string"
          example: "efectivo"
        total:
          type: "integer"
          example: 580
        user_id:
          type: "integer"
          example: 1
        username:
          type: "string"
          example: "fborsalino"
        full_name:
          type: "string"
          example: "federico borsalino"
        email:
          type: "string"
          example: "fborsalino@gmail.com"
        phone:
          type: "integer"
          example: 3513999999
        delivery_address:
          type: "string"
          example: "colon 4300"
        products:
          $ref: "#/components/schemas/OrderProducts"
    Orders:
      type: "array"
      items:
        $ref: "#/components/schemas/Order"
    NewOrder:
      type: "object"
      properties:
        payment_method:
          type: "string"
          example: "efectivo"
        data:
          type: "array"
          items:
            type: "object"
            properties:
              product_id:
                type: "integer"
                example: 1
              amount:
                type: "integer"
                example: 3
    Token:
      type: "object"
      properties:
        token:
          type: "string"
          example: "TOKEN999320"
    Error:
      required:
      - "error"
      type: "object"
      properties:
        error:
          type: "string"
          example: "ocurrio un error inesperado"
    Send:
      type: "string"
      example: "Error message"
  responses:
    UnauthorizedError:
      description: "Invalid Token"
    Disabled:
      description: "Invalid request, user account is disabled"
    NotAdmin:
      description: "Operation forbidden, not an admin"
    NotFound:
      description: "The specified resource was not found"
    Default:
      description: "Unexpected error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            oneOf:
            - $ref: "#/components/schemas/Send"
          examples:
            Token Invalidation:
              summary: "Unauthorized - Invalid Token"
              value: "Unauthorized - Invalid Token"
            Disabled Account:
              summary: "Unauthorized - Account is Disabled"
              value: "Unauthorized - User account is disabled"
    UnauthorizedAdmin:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            oneOf:
            - $ref: "#/components/schemas/Send"
          examples:
            Token Invalidation:
              summary: "Unauthorized - Invalid Token"
              value: "Unauthorized - Invalid Token"
            Disabled Account:
              summary: "Unauthorized - Account is Disabled"
              value: "Unauthorized - User account is disabled"
            Not Admin:
              summary: "Unauthorized - Not an admin"
              value: "Unauthorized - Not an admin"
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
